// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feed_posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedPost = `-- name: CreateFeedPost :exec
INSERT INTO feed_posts (id, title, description, url, feed_id, published_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, description, url, feed_id, published_at, created_at, updated_at
`

type CreateFeedPostParams struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Url         string         `json:"url"`
	FeedID      uuid.UUID      `json:"feed_id"`
	PublishedAt time.Time      `json:"published_at"`
}

func (q *Queries) CreateFeedPost(ctx context.Context, arg CreateFeedPostParams) error {
	_, err := q.db.ExecContext(ctx, createFeedPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.FeedID,
		arg.PublishedAt,
	)
	return err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT feed_posts.id, feed_posts.title, feed_posts.description, feed_posts.url, feed_posts.feed_id, feed_posts.published_at, feed_posts.created_at, feed_posts.updated_at FROM feed_posts
JOIN feed_follows ON feed_posts.feed_id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
ORDER BY feed_posts.published_at DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]FeedPost, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedPost
	for rows.Next() {
		var i FeedPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.FeedID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
